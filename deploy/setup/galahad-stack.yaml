AWSTemplateFormatVersion: 2010-09-09
Description: Sets up a single VPC Multi Subnet Configuration for Galahad/VirtUE
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair
  NameSuffix:
    Description: Suffix to add to all 'Name' tags for easy searching and viewing
    Type: String
    MinLength: 1
    MaxLength: 5
    AllowedPattern: '^[a-zA-Z0-9]+$'
  ImportStackName:
    Description: Name of Stack to import VPC/Subnets from
    Type: String
    Default: None
    ConstraintDescription: Specify Name of Stack that creates a VPC and other network resources.
  DomainDNSName:
    Description: >-
      Fully qualified domain name (FQDN) of the forest root domain e.g.
      corp.example.com
    Type: String
    MinLength: '3'
    MaxLength: '25'
    Default: virtue.gov
    AllowedPattern: '[a-zA-Z0-9]+\..+'
  DomainNetBIOSName:
    Description: >-
      NetBIOS name of the domain (upto 15 characters) for users of earlier
      versions of Windows e.g. CORP
    Type: String
    MinLength: '1'
    MaxLength: '15'
    Default: VIRTUE
    AllowedPattern: '[a-zA-Z0-9]+'
  RestoreModePassword:
    Description: >-
      Password for a separate Administrator account when the domain controller
      is in Restore Mode. Must be at least 8 characters containing letters,
      numbers and symbols
    Type: String
    MinLength: '8'
    MaxLength: '32'
    AllowedPattern: >-
      (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Default: Galahad4ever!
Resources:
  GalahadADWaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  VirtueHostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      HostedZoneConfig:
        Comment: "VPC-private zone for service discovery"
      HostedZoneTags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-Zone'
      Name: !Join
          - ''
          - - 'galahad.'
            - 'com'
      VPCs:
        - VPCId:
            "Fn::ImportValue": !Sub "${ImportStackName}--VIRTUE-VPCID"
          VPCRegion: !Ref "AWS::Region"
  VirtUEAdminADSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        VirtUE Security Group for the VirtUE AD Server on the Administration
        Network
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: General Traffic Out
          FromPort: '-0'
          ToPort: '65535'
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: 172.30.0.0/16
          Description: Allow Talking Internally
          FromPort: '0'
          ToPort: '65535'
          IpProtocol: '-1'
        - CidrIp: 0.0.0.0/0
          Description: RDP Inn
          FromPort: '3389'
          ToPort: '3389'
          IpProtocol: '-1'
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-AdminADSecGroup'
      VpcId:
        "Fn::ImportValue": !Sub "${ImportStackName}--VIRTUE-VPCID"
  VirtUEAdminSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: VirtUE Security Group for the VirtUE Administration Network
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: General Traffic Out
          FromPort: '0'
          ToPort: '65535'
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: 172.30.0.0/16
          Description: Allow Talking Internally
          FromPort: '0'
          ToPort: '65535'
          IpProtocol: '-1'
        - CidrIp: 0.0.0.0/0
          Description: SSH TCP In
          FromPort: '22'
          ToPort: '22'
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          Description: HTTP TCP In
          FromPort: '8080'
          ToPort: '8080'
          IpProtocol: tcp
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-AdminSecGroup'
      VpcId:
        "Fn::ImportValue": !Sub "${ImportStackName}--VIRTUE-VPCID"
  VirtUEUserSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: VirtUE Security Group for the VirtUE User Network
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/16
          Description: General Traffic Out
          FromPort: '0'
          ToPort: '65535'
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: 172.30.0.0/16
          Description: AllowTalkingInternally
          FromPort: '0'
          ToPort: '65535'
          IpProtocol: '-1'
        - CidrIp: 0.0.0.0/0
          Description: SSH TCP In
          FromPort: '22'
          ToPort: '22'
          IpProtocol: tcp
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-UserSecGroup'
      VpcId:
        "Fn::ImportValue": !Sub "${ImportStackName}--VIRTUE-VPCID"
  VirtUEUserStandbySecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: VirtUE Security Group for the VirtUE User Standby Instance Pool.
      SecurityGroupEgress: []
      SecurityGroupIngress: []
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-UserStandbySecGroup'
      VpcId:
        "Fn::ImportValue": !Sub "${ImportStackName}--VIRTUE-VPCID"
  VirtUEValorEFS:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      #ProvisionedThroughputInMibps: 1024
      #ThroughputMode: provisioned
      ThroughputMode: bursting
      FileSystemTags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-ValorEFS'
  VirtUEValorEFSTarget:
    Type: 'AWS::EFS::MountTarget'
    DependsOn:
      - VirtUEValorEFS
    Properties:
      FileSystemId: !Ref VirtUEValorEFS
      SecurityGroups:
        - !Ref VirtUEAdminSecGroup
      SubnetId:
        "Fn::ImportValue": !Sub "${ImportStackName}--ADMIN-SUBNETID"
  ExcaliburServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0f9cf087c1f27d9b1
      InstanceType: t3.xlarge
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: "true"
            VolumeSize: 64
      NetworkInterfaces:
        - DeviceIndex: '0'
          PrivateIpAddress: 172.30.1.44
          SubnetId:
            "Fn::ImportValue": !Sub "${ImportStackName}--ADMIN-SUBNETID"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Install Packages required for AWS EFS mount helper
          apt-get update
          apt-get -y install binutils

          # Install the AWS EFS mount helper
          git clone https://github.com/aws/efs-utils
          cd efs-utils/
          ./build-deb.sh
          apt-get -y install ./build/amazon-efs-utils*deb

          # Create the base mount directory
          mkdir -p /mnt/efs

          # Mount the EFS file system
          echo "${VirtUEValorEFS}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          mount -a

          # Install docker
          apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          apt-get update
          apt-get install -y docker-ce

          # Enable docker for ubuntu user
          usermod -aG docker ubuntu
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-Excalibur'
    DependsOn:
      - VirtUEValorEFSTarget
  CanvasInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0f9cf087c1f27d9b1
      InstanceType: t3.large
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: "true"
      NetworkInterfaces:
        - DeviceIndex: '0'
          PrivateIpAddress: 172.30.1.50
          SubnetId:
            "Fn::ImportValue": !Sub "${ImportStackName}--ADMIN-SUBNETID"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Install Packages required for AWS EFS mount helper
          apt-get update
          apt-get -y install binutils

          # Install the AWS EFS mount helper
          git clone https://github.com/aws/efs-utils
          cd efs-utils/
          ./build-deb.sh
          apt-get -y install ./build/amazon-efs-utils*deb

          # Create the base mount directory
          mkdir -p /mnt/efs

          # Mount the EFS file system
          echo "${VirtUEValorEFS}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          mount -a

          # Install the desktop
          apt-get install -y --no-install-recommends ubuntu-desktop gnome-panel gnome-settings-daemon metacity gnome-terminal
          apt-get install -y nautilus

          # Install needed library for nwjs
          apt-get install -y npm libxss1

          # Install nss library for certtificate management
          apt-get install -y libnss3-tools

          # Packages for pip3 and firefox
          apt-get install -y firefox python3-pip

          # Python module for CLI
          pip3 install prompt_toolkit

          # Python modules for updating Unity Image
          pip3 install sultan==0.8.1 boto3

          # Install VNC server
          apt-get install -y vnc4server

          # Add DNS for canvas.com for canvas to work
          echo "127.0.0.1 canvas.com" >> /etc/hosts

          # Configure the VNC server
          su - ubuntu -c "mkdir .vnc"
          su - ubuntu -c "(echo canvas4U;echo canvas4U) | vncpasswd"
          su - ubuntu -c "vncserver"
          su - ubuntu -c "vncserver -kill :1"
          su - ubuntu -c "echo -e \"\ngnome-panel &\ngnome-settings-daemon &\nmetacity &\nnautilus &\" >> .vnc/xstartup"
          su - ubuntu -c "vncserver -geometry 1600x1200"
          sed -i '/^exit 0/i \
          \
          #\
          # Start VNC Server\
          #\
          su - ubuntu -c "vncserver -geometry 1600x1200"\
          ' /etc/rc.local

      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-Canvas'
    DependsOn:
      - VirtUEValorEFSTarget
  GalahadAD:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-067ff23da8261d1c7
      InstanceType: t3.micro
      KeyName: !Ref KeyName
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              <script>
            - 'cfn-init.exe -v -s '
            - !Ref 'AWS::StackId'
            - ' -r GalahadAD '
            - ' --region '
            - !Ref 'AWS::Region'
            - |+
            - </script>
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: "true"
      NetworkInterfaces:
        - DeviceIndex: '0'
          PrivateIpAddress: 172.30.1.250
          SubnetId:
            "Fn::ImportValue": !Sub "${ImportStackName}--ADMIN-SUBNETID"
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-AD'
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          files:
            'c:\cfn\cfn-hup.conf':
              content: !Join
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

            'c:\cfn\hooks.d\cfn-auto-reloader.conf':
              content: !Join
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.GalahadAD.Metadata.AWS::CloudFormation::Init
                  - 'action=cfn-init.exe -v -s '
                  - !Ref "AWS::StackId"
                  - ' -r GalahadAD'
                  - ' --region '
                  - !Ref "AWS::Region"
                  - |+

            'C:\cfn\RunCommand.bat':
              content: |-
                %~1
                IF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )

            'C:\Windows\Temp\ad_ldap.crt':
              content: !Join
                - ''
                - - |
                  - '-----BEGIN CERTIFICATE-----'
                  - '      MIIDtzCCAp+gAwIBAgIJAJQMoYcrQhZ0MA0GCSqGSIb3DQEBCwUAMHIxCzAJBgNVBAYTAlVTMRAwDgYDVQQIDAdBbGFiYW1hMRMwEQYDVQQHDApIdW50c3ZpbGxlMREwDwYDVQQKDAhTdGFyIExhYjEQMA4GA1UECwwHR2FsYWhhZDEXMBUGA1UEAwwOYWQuZ2FsYWhhZC5jb20wHhcNMTgxMTAxMjEzMTQ5WhcNMTkxMTAxMjEzMTQ5WjByMQswCQYDVQQGEwJVUzEQMA4GA1UECAwHQWxhYmFtYTETMBEGA1UEBwwKSHVudHN2aWxsZTERMA8GA1UECgwIU3RhciBMYWIxEDAOBgNVBAsMB0dhbGFoYWQxFzAVBgNVBAMMDmFkLmdhbGFoYWQuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAq0VlKZ6V6+vlauyorZMVUvjrFcBH1FnVkajW5BDKYrfOGah6zQiiK7bnYcUxzcIqtBRhg/nlrJCaAbPzoYPnYP7FpJxf8hmJ1i9pgZTIQ2dOdOwngv9qZiauIR8UZ3mlJX26CKG478hs/3tPGUQ/tcfjuzkdef2KtV5+EBZdAOmJcng5EDQYPNFh/j98jM7trvVnpWAePfm8FVv5GdxNPH+HgFEgfq4WwGW9fa+rIrPJohc+71wrrBd5+QBDc64I8429j9+SsI5fNeHj2PZLGPYMhr2K2a42zuJUJQuUUABMO/nrx+htwv5EQjvTqukRLP40V7Z2Y5CQ2wkaRd1jzQIDAQABo1AwTjAdBgNVHQ4EFgQUeQwfwGP+sVP8iSOBxfxKtApheM4wHwYDVR0jBBgwFoAUeQwfwGP+sVP8iSOBxfxKtApheM4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAcApMIBPhX9S9R0M38/LvNbTUKR9u9GPnKSl+lG2PP4sEi1zFFGpAtN6zUQBO3daENJIWa/U8y0iLnqx3jlYSp37O+3GjHQPOPmDdztBl0D4Vntt++mOTOk2QUbRqvj5SZPXIZaZRI2EBITOvfn4aR0YtTfd9GH699VY2KWo0lCFYwEo9VLGQ8UajyjMqptxcp2fLoz4Yta+HSzU9lQqj/ERhudFhFvidl2tcfkfoR7szUTNbRTHEauHrjDPkHPO1QO/dP80eKjk8K3aEvj8JPvStIcXhcX63alj/qQvO3G3NWcDuoi+mfOy7gRwW5wiPAEr1gxANtN4lBxGn4dbKkg==
'
                  - '-----END CERTIFICATE-----'
                  - |+

          commands:
            1-run-dcpromo:
              command: !Join
                - ''
                - - >-
                    C:\cfn\RunCommand.bat "dcpromo /unattend
                    /ReplicaOrNewDomain:Domain  /NewDomain:Forest
                    /NewDomainDNSName:
                  - !Ref DomainDNSName
                  - '  /ForestLevel:4 /DomainNetbiosName:'
                  - !Ref DomainNetBIOSName
                  - ' /DomainLevel:4  /InstallDNS:Yes  /ConfirmGc:Yes  /CreateDNSDelegation:No  /DatabasePath:"C:\Windows\NTDS"  /LogPath:"C:\Windows\NTDS"  /SYSVOLPath:"C:\Windows\SYSVOL" /SafeModeAdminPassword='
                  - !Ref RestoreModePassword
                  - ' /RebootOnCompletion:Yes"'
              waitAfterCompletion: forever
            2-signal-success:
              command: !Join
                - ''
                - - cfn-signal.exe -e 0 "
                  - !Base64
                    Ref: GalahadADWaitHandle
                  - '"'
            3-add-ou:
              command: !Sub >-
                powershell.exe -Command dsadd ou 'ou=galahad,dc=virtue,dc=gov'
              waitAfterCompletion: 2
            4-Add-user-slapd:
              command: !Sub >-
                powershell.exe -Command New-ADUser -Name slapd
                -UserPrincipalName slapd@virtue.gov -AccountPassword
                (ConvertTo-SecureString Test123! -AsPlainText -Force)
                -Enabled:$true -PasswordNeverExpires:$true
                -DisplayName slapd-ldap -GivenName slapd-ldap
                -SamAccountName slapd  -Path 'ou=galahad,dc=virtue,dc=gov'
              waitAfterCompletion: 1
            5-Add-user-jbenson:
              command: !Sub >-
                powershell.exe -Command New-ADUser -Name jbenson
                -UserPrincipalName jbenson@virtue.gov -AccountPassword
                (ConvertTo-SecureString Test123! -AsPlainText -Force)
                -Enabled:$true -PasswordNeverExpires:$true
                -DisplayName 'James Benson' -GivenName James
                -SamAccountName jbenson -Path 'ou=galahad,dc=virtue,dc=gov'
              waitAfterCompletion: 1
            6-Add-user-fpatwa:
              command: !Sub >-
                powershell.exe -Command New-ADUser -Name fpatwa
                -UserPrincipalName fpatwa@virtue.gov -AccountPassword
                (ConvertTo-SecureString Test123! -AsPlainText -Force)
                -Enabled:$true -PasswordNeverExpires:$true
                -DisplayName 'Farhan Patwa' -GivenName Farhan
                -SamAccountName fpatwa -Path 'ou=galahad,dc=virtue,dc=gov'
              waitAfterCompletion: 1
            7-Install-certificates-1:
              command: !Sub >-
                powershell.exe -Command Import-Certificate -FilePath
                C:\Windows\Temp\ad_ldap.crt -CertStoreLocation
                Cert:\LocalMachine\My
              waitAfterCompletion: 1
            8-Install-certificates-2:
              command: !Sub >-
                powershell.exe -Command Import-Certificate -FilePath
                C:\Windows\Temp\ad_ldap.crt -CertStoreLocation
                Cert:\LocalMachine\Root
              waitAfterCompletion: 1
            9-signal-success:
              command: !Join
                - ''
                - - cfn-signal.exe -e 0 "
                  - !Base64
                    Ref: GalahadADWaitHandle
                  - '"'
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - 'c:\cfn\cfn-hup.conf'
                  - 'c:\cfn\hooks.d\cfn-auto-reloader.conf'
 ##########################################################
 # The Exchange node was to test email support in Virtues
 # It is not needed at the moment.
 ##########################################################
 # Exchange:
 #   Type: 'AWS::EC2::Instance'
 #   Properties:
 #     ImageId: ami-0af5bd73e925f9853
 #     InstanceType: t2.large
 #     KeyName: !Ref KeyName
 #     BlockDeviceMappings:
 #       - DeviceName: "/dev/sda1"
 #         Ebs:
 #           DeleteOnTermination: "true"
 #           VolumeSize: 60
 #     NetworkInterfaces:
 #       - DeviceIndex: '0'
 #         PrivateIpAddress: 172.30.1.249
 #         SubnetId:
 #           "Fn::ImportValue": !Sub "${ImportStackName}--ADMIN-SUBNETID"
 #     Tags:
 #       - Key: Project
 #         Value: Virtue
 #       - Key: Name
 #         Value: !Join
 #           - ''
 #           - - VirtUE-
 #             - !Ref NameSuffix
 #             - '-Exchange'
  RethinkDB:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0f9cf087c1f27d9b1
      InstanceType: t3.medium
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: "true"
      NetworkInterfaces:
        - DeviceIndex: '0'
          PrivateIpAddress: 172.30.1.45
          SubnetId:
            "Fn::ImportValue": !Sub "${ImportStackName}--ADMIN-SUBNETID"
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-RethinkDB'
    DependsOn:
      - VirtUEValorEFSTarget
  GalahadAggregator:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0f9cf087c1f27d9b1
      InstanceType: t3.medium
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: "true"
            VolumeSize: 64
      NetworkInterfaces:
        - DeviceIndex: '0'
          PrivateIpAddress: 172.30.1.46
          SubnetId:
            "Fn::ImportValue": !Sub "${ImportStackName}--ADMIN-SUBNETID"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Install Packages required for AWS EFS mount helper
          apt-get update
          apt-get -y install binutils

          # Install the AWS EFS mount helper
          git clone https://github.com/aws/efs-utils
          cd efs-utils/
          ./build-deb.sh
          apt-get -y install ./build/amazon-efs-utils*deb

          # Create the base mount directory
          mkdir -p /mnt/efs

          # Mount the EFS file system
          echo "${VirtUEValorEFS}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          mount -a

          # Install docker
          apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          apt-get update
          apt-get install -y docker-ce

          # Enable docker for ubuntu user
          usermod -aG docker ubuntu

          # Install docker compose
          curl -L "https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          # Clone the docker-virtue dir which has the aggregator setup files
          su - ubuntu -c "git clone https://gitlab.com/utsa-ics/galahad/docker-virtue.git"

          # Download the docker images
          bash /home/ubuntu/docker-virtue/elastic/image_pull.sh
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-Aggregator'
    DependsOn:
      - VirtUEValorEFSTarget
  ValorRouterENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: "Valor Router Interface"
      PrivateIpAddress: 172.30.1.53
      SubnetId:
        "Fn::ImportValue": !Sub "${ImportStackName}--ADMIN-SUBNETID"
      SourceDestCheck: False
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-ValorRouterENI'
  ValorRouter:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0f9cf087c1f27d9b1
      InstanceType: t3.small
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - DeviceIndex: '0'
          NetworkInterfaceId: !Ref ValorRouterENI
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Install Packages required for AWS EFS mount helper
          apt-get update
          apt-get -y install binutils

          # Install the AWS EFS mount helper
          git clone https://github.com/aws/efs-utils
          cd efs-utils/
          ./build-deb.sh
          apt-get -y install ./build/amazon-efs-utils*deb

          # Create the base mount directory
          mkdir -p /mnt/efs

          # Mount the EFS file system
          echo "${VirtUEValorEFS}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          mount -a

          # Install System packages required for the Router
          apt-get -y install python-pip openvswitch-common openvswitch-switch bridge-utils

          # Install pip packages
          pip install rethinkdb==2.3.0.post6
          pip install boto
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-ValorRouter'
    DependsOn:
      - ValorRouterENI
      - VirtUEValorEFSTarget
      - RethinkDB
  XenPVMBuilder:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0f9cf087c1f27d9b1
      InstanceType: t3.large
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: "true"
            VolumeSize: 48
      NetworkInterfaces:
        - DeviceIndex: '0'
          PrivateIpAddress: 172.30.1.47
          SubnetId:
            "Fn::ImportValue": !Sub "${ImportStackName}--ADMIN-SUBNETID"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Install Packages required for AWS EFS mount helper
          apt-get update
          apt-get -y install binutils

          # Install the AWS EFS mount helper
          git clone https://github.com/aws/efs-utils
          cd efs-utils/
          ./build-deb.sh
          apt-get -y install ./build/amazon-efs-utils*deb

          # Create the base mount directory
          mkdir -p /mnt/efs

          # Mount the EFS file system
          echo "${VirtUEValorEFS}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          mount -a

          # Install Xen Tools required for creating the Xen Images
          DEBIAN_FRONTEND=noninteractive apt-get install -y xen-tools
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-XenPVMBuilder'
    DependsOn:
      - VirtUEValorEFSTarget
      - RethinkDB
  ExcaliburServerDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref VirtueHostedZone
      Name: !Join
          - ''
          - - 'excalibur.'
            - 'galahad.'
            - 'com'
            - '.'
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt ExcaliburServer.PrivateIp
    DependsOn:
        - VirtueHostedZone
        - ExcaliburServer
  GalahadADDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref VirtueHostedZone
      Name: !Join
          - ''
          - - 'ad.'
            - 'galahad.'
            - 'com'
            - '.'
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt GalahadAD.PrivateIp
    DependsOn:
        - VirtueHostedZone
        - GalahadAD
  RethinkDBDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref VirtueHostedZone
      Name: !Join
          - ''
          - - 'rethinkdb.'
            - 'galahad.'
            - 'com'
            - '.'
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt RethinkDB.PrivateIp
    DependsOn:
        - VirtueHostedZone
        - RethinkDB
  ValorRouterDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref VirtueHostedZone
      Name: !Join
          - ''
          - - 'valor-router.'
            - 'galahad.'
            - 'com'
            - '.'
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt ValorRouter.PrivateIp
    DependsOn:
        - VirtueHostedZone
        - ValorRouter
  GalahadAggregatorDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref VirtueHostedZone
      Name: !Join
          - ''
          - - 'aggregator.'
            - 'galahad.'
            - 'com'
            - '.'
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt GalahadAggregator.PrivateIp
    DependsOn:
        - VirtueHostedZone
        - GalahadAggregator
  XenPVMBuilderDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref VirtueHostedZone
      Name: !Join
          - ''
          - - 'xenpvmbuilder.'
            - 'galahad.'
            - 'com'
            - '.'
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt XenPVMBuilder.PrivateIp
    DependsOn:
        - VirtueHostedZone
        - XenPVMBuilder
  CanvasInstanceDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref VirtueHostedZone
      Name: !Join
          - ''
          - - 'canvas.'
            - 'galahad.'
            - 'com'
            - '.'
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt CanvasInstance.PrivateIp
    DependsOn:
        - VirtueHostedZone
        - CanvasInstance
  PublicSubnetVirtueRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - ValorRouterENI
    Properties:
      RouteTableId:
        "Fn::ImportValue": !Sub "${ImportStackName}--PUBLIC-RT"
      DestinationCidrBlock: "10.91.0.0/16"
      NetworkInterfaceId: !Ref ValorRouterENI
  PrivateSubnetVirtueRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - ValorRouterENI
    Properties:
      RouteTableId:
        "Fn::ImportValue": !Sub "${ImportStackName}--PRIVATE-RT"
      DestinationCidrBlock: "10.91.0.0/16"
      NetworkInterfaceId: !Ref ValorRouterENI
Outputs:
  MountTargetID:
    Description: Mount target ID
    Value: !Ref VirtUEValorEFSTarget
  FileSystemID:
    Description: File system ID
    Value: !Ref VirtUEValorEFS
